import { Route } from "./Route.lib.avt";
import { Event } from "./Event.lib.avt";
import type { MergeWsEventsType, MergeWsRoutesType, WsEventType, WsRouteType } from "./type.lib.avt";
import { Connection } from "./Connection.lib.avt";
import type { ConnectionOptions } from "./ISocket.lib.avt";

namespace WebSocket {
    export abstract class EndPoint extends Connection {


        public static With<const T extends { routes: readonly { type: WsRouteType, path: string; }[], events: readonly { type: WsEventType, path: string; }[]; }>(options: T) {
            abstract class EndPointWith extends EndPoint {
                constructor() {
                    super();
                    for(let route of options.routes) {
                        if(typeof route == "function") {
                            this._routes.add(route);
                        }
                        else {
                            this._routes.add(route.type, route.path);
                        }
                    }
                    for(let _event of options.events) {
                        if(typeof _event == "function") {
                            this._events.add(_event);
                        }
                        else {
                            this._events.add(_event.type, _event.path);
                        }
                    }
                }
            }
            return EndPointWith as Aventus.MixProto<Aventus.MixProto<typeof EndPoint, MergeWsRoutesType<T['routes']>, "routes">, MergeWsEventsType<T['events']>, "events">;
        }


        private _routes: any;
        private _events: any;

        public constructor() {
            super();
            Object.defineProperty(this, "routes", {
                get: () => { return this._routes; }
            });
            Object.defineProperty(this, "events", {
                get: () => { return this._events; }
            });
            this.createProxy();
        }


        private createProxy() {
            if(!this._routes) {
                this._routes = new Proxy({}, Aventus.createCommProxy<Route>(this));
            }
            if(!this._events) {
                this._events = new Proxy({}, Aventus.createCommProxy<Event>(this));
            }
        }

        /**
         * @inheritdoc
         */
        protected override configure(options: ConnectionOptions): ConnectionOptions {
            options.socketName = this.path;

            return options;
        }

        protected abstract get path(): string;

    }

}